concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

name: ci/cd
on:
  push:
    branches: ['master']
    tags: ['v*.*.*']
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

env:
  TEST_TOKEN: ${{ secrets.TEST_TOKEN }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      hypebot: ${{ steps.changes.outputs.hypebot }}
      hypeserver: ${{ steps.changes.outputs.hypeserver }}
      common: ${{ steps.changes.outputs.common }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            hypebot:
              - 'internal/hypebot/**'
              - 'cmd/hypebot/**'
              - 'docker/hypebot/**'
              - 'go.mod'
              - 'go.sum'
            hypeserver:
              - 'internal/hypeserver/**'
              - 'cmd/hypeserver/**'
              - 'docker/hypeserver/**'
              - 'go.mod'
              - 'go.sum'
            common:
              - 'internal/datastore/**'
              - 'pkg/**'
              - 'go.mod'
              - 'go.sum'

  tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.hypebot == 'true' || needs.changes.outputs.hypeserver == 'true' || needs.changes.outputs.common == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run go tests
        run: go test "./internal/..." -count=1

  build-and-push-hypebot:
    needs: [tests, changes]
    if: |
      (needs.changes.outputs.hypebot == 'true' || needs.changes.outputs.common == 'true') &&
      startsWith(github.ref, 'refs/tags/v') && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    env:
      CUSTOM_STATUS: ${{ secrets.CUSTOM_STATUS }}
      POToken: ${{ secrets.POToken }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/sonastea/hypebot

      - name: Build and push hypebot docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/hypebot/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-and-push-hypeserver:
    needs: [tests, changes]
    if: |
      (needs.changes.outputs.hypeserver == 'true' || needs.changes.outputs.common == 'true') &&
      startsWith(github.ref, 'refs/tags/v') && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/sonastea/hypeserver

      - name: Build and push hypeserver docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/hypeserver/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deployment:
    needs: [build-and-push-hypebot, build-and-push-hypeserver]
    if: |
      always() && 
      (needs.build-and-push-hypebot.result == 'success' || 
       needs.build-and-push-hypeserver.result == 'success' ||
       needs.build-and-push-hypebot.result == 'skipped' || 
       needs.build-and-push-hypeserver.result == 'skipped') &&
      !contains(needs.*.result, 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Deploy and run docker container
        uses: appleboy/ssh-action@v1.2.2
        env:
          TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          POToken: ${{ secrets.POToken }}
          DISABLED_COMMANDS: ${{ secrets.DISABLED_COMMANDS }}
          CUSTOM_STATUS: ${{ secrets.CUSTOM_STATUS }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            cd $(pwd)/hypebot
            git restore .
            git pull

            if [ ! -z "${{ secrets.DISABLED_COMMANDS }}" ]; then
              if grep -q "DISABLED_COMMANDS" .env; then
                sed -i "s/^DISABLED_COMMANDS=.*/DISABLED_COMMANDS=${{ secrets.DISABLED_COMMANDS }}/" .env
              else
                echo "DISABLED_COMMANDS=${{ secrets.DISABLED_COMMANDS }}" >> .env
              fi
            fi

            docker compose down --rmi local
            docker compose up -d --force-recreate --pull always
